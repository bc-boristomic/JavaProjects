package ba.bitcamp.day3;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.StringTokenizer;

import javax.swing.JFileChooser;

public class Task1 {

	public static void main(String[] args) {

		LinkedList<Employee> list = new LinkedList<>();
		JFileChooser choose = new JFileChooser(System.getProperty("usr.dir"));
		int option = choose.showOpenDialog(null);
		if (option == JFileChooser.APPROVE_OPTION) {
			File file = null;
			file = choose.getSelectedFile();
			Scanner in = null;
			try {
				in = new Scanner(file);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
			String line = null;
			in.nextLine();
			while (in.hasNext()) {
				line = in.nextLine();
				StringTokenizer st = new StringTokenizer(line, ",");
				String name = st.nextToken();
				String surname = st.nextToken();
				String gender = st.nextToken();
				String position = st.nextToken();
				Integer salary = Integer.parseInt(st.nextToken());
				Employee temp = new Employee(name, surname, gender, position, salary);
				list.add(temp);
				
			}
			list.sort(new Comparator<Employee>() {

				@Override
				public int compare(Employee o1, Employee o2) {
					if (!o1.getName().equals(o2.getName())) {
						return o1.getName().compareToIgnoreCase(o2.getName());
					}
					if (!o1.getSalary().equals(o2.getSalary())) {
						return o1.getSalary().compareToIgnoreCase(o2.getSalary());
					}
					return 0;
				}
			});
			System.out.println(list);
			list.sort(new Comparator<Employee>() {

				@Override
				public int compare(Employee o1, Employee o2) {
					if (!o1.getSalary().equals(o2.getSalary())) {
						return o1.getSalary().compareToIgnoreCase(o2.getSalary());
					}
					return 0;
				}
			});
			System.out.println(list);

		}
	}

}
