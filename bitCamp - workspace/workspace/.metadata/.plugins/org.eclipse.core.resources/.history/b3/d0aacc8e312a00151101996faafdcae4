package ba.bitcamp.exercises.day2;

/**
 * Simulates Stack of Strings in LinkedList.
 * 
 * @author boris.tomic
 *
 */
public class StackOfLinkedStrings {

	private Node start;

	/**
	 * Constructor of StackOfLinkedString class, sets start <code>Node</code> as
	 * null.
	 */
	public StackOfLinkedStrings() {
		start = null;
	}

	/**
	 * Checks if there is any element in Stack, returns <code>boolean</code>
	 * type representation, <code>true</code> if empty, <code>false</code> in
	 * not
	 * 
	 * @return - returns <code>boolean</code> type representation,
	 *         <code>true</code> if empty, <code>false</code> in not
	 */
	public boolean empty() {
		return start == null;
	}
	
	
	public String push(String value) {
		if (start == null) {
			start.setValue(value);
		} else {
			Node temp = getLastNode();
			temp.
		}
	}
	/*
	 * Klasa je implementirana pomoÄ‡u linkova. Implementirati  push, pop
	 * i peek metode.
	 */
	
	public Node getLastNode() {
		
	}

	/**
	 * Private inner class Node used to link all the elements.
	 * 
	 * @author boris.tomic
	 *
	 */
	private class Node {

		private Node next;
		private String value;

		/**
		 * Constructor of Node class, sets next <code>Node</code> as
		 * <code>null</code>, and value is inputed by param value.
		 * 
		 * @param value
		 *            - <code>String</code> type value
		 */
		public Node(String value) {
			this.value = value;
			next = null;
		}

		public Node getNext() {
			return next;
		}

		public void setNext(Node next) {
			this.next = next;
		}

		public String getValue() {
			return value;
		}

		public void setValue(String value) {
			this.value = value;
		}

	}

}
